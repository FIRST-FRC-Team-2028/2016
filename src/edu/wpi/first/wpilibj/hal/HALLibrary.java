package edu.wpi.first.wpilibj.hal;

import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import com.modeliosoft.modelio.javadesigner.annotations.objid;

/**
 * JNA Wrapper for library <b>HAL</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
@objid ("55994c83-9f62-4b6e-a96e-42b42afb7e78")
public class HALLibrary {
    /**
     * <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i>
     */
    @objid ("91433c5b-e2ef-4edc-82dd-f0fcf5bcfa34")
    public static final String NULL_PARAMETER_MESSAGE = "A pointer parameter to a method is NULL";

    /**
     * <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i>
     */
    @objid ("6225f16b-1f44-4677-b662-e51fcd6f123a")
    public static final String NO_AVAILABLE_RESOURCES_MESSAGE = "No available resources to allocate";

    /**
     * <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i>
     */
    @objid ("ca4f5108-2a38-49ce-8f5f-fc3a3c2deff1")
    public static final String INCOMPATIBLE_STATE_MESSAGE = "Incompatible State: The operation cannot be completed";

    /**
     * <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i>
     */
    @objid ("813f36c6-ebb2-4625-82d8-09a4587b686c")
    public static final String ANALOG_TRIGGER_PULSE_OUTPUT_ERROR_MESSAGE = "Attempted to read AnalogTrigger pulse output.";

    /**
     * <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i>
     */
    @objid ("7909a859-465b-4b41-be8c-f76e12a7785f")
    public static final int ANALOG_TRIGGER_LIMIT_ORDER_ERROR = -10;

    /**
     * <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i>
     */
    @objid ("897cf454-11a7-42ca-80d3-d1c84e026473")
    public static final int SPI_READ_NO_DATA = 14;

    /**
     * <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i>
     */
    @objid ("cca153e9-dc8a-43b5-aca7-579f6206ec40")
    public static final String VOLTAGE_OUT_OF_RANGE_MESSAGE = "Voltage to convert to raw value is out of range [-10; 10]";

    /**
     * <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i>
     */
    @objid ("fdf19013-533f-4bc1-a9d2-af8d5d4af2e9")
    public static final String ANALOG_TRIGGER_LIMIT_ORDER_ERROR_MESSAGE = "AnalogTrigger limits error.  Lower limit > Upper Limit";

    /**
     * <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i>
     */
    @objid ("f9721e15-172f-4691-82a0-65e1535a2135")
    public static final int SPI_WRITE_NO_MOSI = 12;

    /**
     * <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i>
     */
    @objid ("ea942232-e90a-43d1-9c71-731d87f9c7c7")
    public static final String PARAMETER_OUT_OF_RANGE_MESSAGE = "A parameter is out of range.";

    /**
     * <i>native declaration : AthenaJava\target\native\include\HAL\Task.h</i>
     */
    @objid ("95fd54be-1323-4e94-845e-acb7c54c0b7d")
    public static final int OK = 0;

    /**
     * <i>native declaration : AthenaJava\target\native\include\HAL\Task.h</i>
     */
    @objid ("34bef38c-a6b7-4ae5-8df0-fc4fde0d5c58")
    public static final int ERROR = (-1);

    /**
     * <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i>
     */
    @objid ("2ad50c6f-cc11-4abb-9eb1-05f61731016c")
    public static final String SAMPLE_RATE_TOO_HIGH_MESSAGE = "Analog module sample rate is too high";

    /**
     * <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i>
     */
    @objid ("4c2a5302-f86c-4d91-a59c-8f680189daa0")
    public static final String SPI_WRITE_NO_MOSI_MESSAGE = "Cannot write to SPI port with no MOSI output";

    /**
     * <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i>
     */
    @objid ("e91fc3d8-bd3a-4375-bc06-6ebb8af3b54b")
    public static final int SPI_READ_NO_MISO = 13;

    /**
     * <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i>
     */
    @objid ("700af4d6-4ff9-40d7-9ef7-a0f610d4ea46")
    public static final String SPI_READ_NO_DATA_MESSAGE = "No data available to read from SPI";

    /**
     * <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i>
     */
    @objid ("e7274b62-d872-4eeb-9336-cafd8cd388ac")
    public static final String SPI_READ_NO_MISO_MESSAGE = "Cannot read from SPI port with no MISO input";

    /**
     * <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i>
     */
    @objid ("4aa62f2b-3e03-4587-bd60-0ef67771f376")
    public static final String LOOP_TIMING_ERROR_MESSAGE = "Digital module loop timing is not the expected value";

//public interface initializeNotifier_ProcessQueue_callback extends Callback {
//    void apply(int uint32_t1, Pointer voidPtr1);
//};
//public interface FUNCPTR extends Callback {
//    int apply(Object... varargs);
//};
//public static native byte checkPWMChannel(Pointer digital_port_pointer);
//public static native byte checkRelayChannel(Pointer digital_port_pointer);
//@Deprecated
//public static native Pointer initializeNotifier(HALLibrary.initializeNotifier_ProcessQueue_callback ProcessQueue, IntByReference status);
//public static native Pointer initializeNotifier(HALLibrary.initializeNotifier_ProcessQueue_callback ProcessQueue, IntBuffer status);
//@Deprecated
//public static native void cleanNotifier(Pointer notifier_pointer, IntByReference status);
//public static native void cleanNotifier(Pointer notifier_pointer, IntBuffer status);
//@Deprecated
//public static native void updateNotifierAlarm(Pointer notifier_pointer, int triggerTime, IntByReference status);
//public static native void updateNotifierAlarm(Pointer notifier_pointer, int triggerTime, IntBuffer status);
    /**
     * <i>native declaration : AthenaJava\target\native\include\HAL\Notifier.h:339</i>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Interrupts.h:342</i>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Task.h:409</i>
     * Original signature : <code>bool checkPWMChannel(void*)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:84</i>
     * Original signature : <code>bool checkRelayChannel(void*)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:86</i>
     * Original signature : <code>void* initializeNotifier(initializeNotifier_ProcessQueue_callback*, int32_t*)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Notifier.h:334</i><br>
     * @deprecated use the safer methods {@link #initializeNotifier(edu.wpi.first.wpilibj.hal.HALLibrary.initializeNotifier_ProcessQueue_callback, java.nio.IntBuffer)} and {@link #initializeNotifier(edu.wpi.first.wpilibj.hal.HALLibrary.initializeNotifier_ProcessQueue_callback, com.sun.jna.ptr.IntByReference)} instead
     * Original signature : <code>void* initializeNotifier(initializeNotifier_ProcessQueue_callback*, int32_t*)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Notifier.h:334</i>
     * Original signature : <code>void cleanNotifier(void*, int32_t*)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Notifier.h:336</i><br>
     * @deprecated use the safer methods {@link #cleanNotifier(com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #cleanNotifier(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
     * Original signature : <code>void cleanNotifier(void*, int32_t*)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Notifier.h:336</i>
     * Original signature : <code>void updateNotifierAlarm(void*, uint32_t, int32_t*)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Notifier.h:338</i><br>
     * @deprecated use the safer methods {@link #updateNotifierAlarm(com.sun.jna.Pointer, int, java.nio.IntBuffer)} and {@link #updateNotifierAlarm(com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
     * Original signature : <code>void updateNotifierAlarm(void*, uint32_t, int32_t*)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Notifier.h:338</i>
     * Original signature : <code>void delayTicks(int32_t)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Utilities.h:366</i>
     */
    @objid ("992340c4-11d1-4aba-89ee-f9da32206366")
    public static native void delayTicks(int ticks);

    /**
     * Original signature : <code>void delayMillis(double)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Utilities.h:368</i>
     */
    @objid ("c7b15e49-3b70-423b-a916-626f0340a150")
    public static native void delayMillis(double ms);

    /**
     * Original signature : <code>void delaySeconds(double)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Utilities.h:370</i>
     */
    @objid ("35d7c985-787b-4a0e-b553-868c303c0abb")
    public static native void delaySeconds(double s);

    /**
     * Original signature : <code>MUTEX_ID initializeMutex(uint32_t)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Semaphore.h:385</i>
     */
    @objid ("fc06e353-8844-44d6-af83-f39dbb16c04a")
    public static native ByteBuffer initializeMutex(int flags);

//@Deprecated
//public static native void deleteMutex(Pointer sem);
    /**
     * Original signature : <code>void deleteMutex(MUTEX_ID)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Semaphore.h:387</i><br>
     * @deprecated use the safer methods {@link #deleteMutex(edu.wpi.first.wpilibj.hal.HALLibrary.MUTEX_ID)} and {@link #deleteMutex(com.sun.jna.Pointer)} instead
     * Original signature : <code>void deleteMutex(MUTEX_ID)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Semaphore.h:387</i>
     */
    @objid ("f5b87031-4f16-4e92-b42e-27d60b732ac9")
    public static native void deleteMutex(ByteBuffer sem);

//@Deprecated
//public static native byte takeMutex(Pointer sem, int timeout);
    /**
     * Original signature : <code>int8_t takeMutex(MUTEX_ID, int32_t)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Semaphore.h:389</i><br>
     * @deprecated use the safer methods {@link #takeMutex(edu.wpi.first.wpilibj.hal.HALLibrary.MUTEX_ID, int)} and {@link #takeMutex(com.sun.jna.Pointer, int)} instead
     * Original signature : <code>int8_t takeMutex(MUTEX_ID, int32_t)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Semaphore.h:389</i>
     */
    @objid ("f95b771e-9d29-40e8-936b-73076e1e964c")
    public static native byte takeMutex(ByteBuffer sem, int timeout);

//@Deprecated
//public static native byte giveMutex(Pointer sem);
//public static native byte giveMutex(HALLibrary.MUTEX_ID sem);
//public static native HALLibrary.SEMAPHORE_ID initializeSemaphore(int flags, int initial_value);
//@Deprecated
//public static native void deleteSemaphore(Pointer sem);
//public static native void deleteSemaphore(HALLibrary.SEMAPHORE_ID sem);
//@Deprecated
//public static native byte takeSemaphore(Pointer sem, int timeout);
//public static native byte takeSemaphore(HALLibrary.SEMAPHORE_ID sem, int timeout);
//@Deprecated
//public static native byte giveSemaphore(Pointer sem);
//public static native byte giveSemaphore(HALLibrary.SEMAPHORE_ID sem);
//public static native HALLibrary.MULTIWAIT_ID initializeMultiWait();
//@Deprecated
//public static native void deleteMultiWait(Pointer sem);
//public static native void deleteMultiWait(HALLibrary.MULTIWAIT_ID sem);
//@Deprecated
//public static native byte takeMultiWait(Pointer sem, int timeout);
//public static native byte takeMultiWait(HALLibrary.MULTIWAIT_ID sem, int timeout);
//@Deprecated
//public static native byte giveMultiWait(Pointer sem);
//public static native byte giveMultiWait(HALLibrary.MULTIWAIT_ID sem);
//@Deprecated
//public static native HALLibrary.TASK spawnTask(Pointer name, int priority, int options, int stackSize, HALLibrary.FUNCPTR entryPt, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9);
//public static native HALLibrary.TASK spawnTask(ByteBuffer name, int priority, int options, int stackSize, HALLibrary.FUNCPTR entryPt, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9);
//@Deprecated
//public static native int restartTask(Pointer task);
//public static native int restartTask(HALLibrary.TASK task);
//@Deprecated
//public static native int deleteTask(Pointer task);
//public static native int deleteTask(HALLibrary.TASK task);
//@Deprecated
//public static native int isTaskReady(Pointer task);
//public static native int isTaskReady(HALLibrary.TASK task);
//@Deprecated
//public static native int isTaskSuspended(Pointer task);
//public static native int isTaskSuspended(HALLibrary.TASK task);
//@Deprecated
//public static native int suspendTask(Pointer task);
//public static native int suspendTask(HALLibrary.TASK task);
//@Deprecated
//public static native int resumeTask(Pointer task);
//public static native int resumeTask(HALLibrary.TASK task);
//@Deprecated
//public static native int verifyTaskID(Pointer task);
//public static native int verifyTaskID(HALLibrary.TASK task);
//@Deprecated
//public static native int setTaskPriority(Pointer task, int priority);
//public static native int setTaskPriority(HALLibrary.TASK task, int priority);
//@Deprecated
//public static native int getTaskPriority(Pointer task, IntByReference priority);
//public static native int getTaskPriority(HALLibrary.TASK task, IntBuffer priority);
//public static native Pointer getPort(byte pin);
//@Deprecated
//public static native short getFPGAVersion(IntByReference status);
//public static native short getFPGAVersion(IntBuffer status);
//@Deprecated
//public static native int getFPGARevision(IntByReference status);
//public static native int getFPGARevision(IntBuffer status);
//@Deprecated
//public static native int getFPGATime(IntByReference status);
//public static native int getFPGATime(IntBuffer status);
    /**
     * Original signature : <code>int8_t giveMutex(MUTEX_ID)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Semaphore.h:391</i><br>
     * @deprecated use the safer methods {@link #giveMutex(edu.wpi.first.wpilibj.hal.HALLibrary.MUTEX_ID)} and {@link #giveMutex(com.sun.jna.Pointer)} instead
     * Original signature : <code>int8_t giveMutex(MUTEX_ID)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Semaphore.h:391</i>
     * Original signature : <code>SEMAPHORE_ID initializeSemaphore(uint32_t, uint32_t)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Semaphore.h:393</i>
     * Original signature : <code>void deleteSemaphore(SEMAPHORE_ID)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Semaphore.h:395</i><br>
     * @deprecated use the safer methods {@link #deleteSemaphore(edu.wpi.first.wpilibj.hal.HALLibrary.SEMAPHORE_ID)} and {@link #deleteSemaphore(com.sun.jna.Pointer)} instead
     * Original signature : <code>void deleteSemaphore(SEMAPHORE_ID)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Semaphore.h:395</i>
     * Original signature : <code>int8_t takeSemaphore(SEMAPHORE_ID, int32_t)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Semaphore.h:397</i><br>
     * @deprecated use the safer methods {@link #takeSemaphore(edu.wpi.first.wpilibj.hal.HALLibrary.SEMAPHORE_ID, int)} and {@link #takeSemaphore(com.sun.jna.Pointer, int)} instead
     * Original signature : <code>int8_t takeSemaphore(SEMAPHORE_ID, int32_t)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Semaphore.h:397</i>
     * Original signature : <code>int8_t giveSemaphore(SEMAPHORE_ID)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Semaphore.h:399</i><br>
     * @deprecated use the safer methods {@link #giveSemaphore(edu.wpi.first.wpilibj.hal.HALLibrary.SEMAPHORE_ID)} and {@link #giveSemaphore(com.sun.jna.Pointer)} instead
     * Original signature : <code>int8_t giveSemaphore(SEMAPHORE_ID)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Semaphore.h:399</i>
     * Original signature : <code>MULTIWAIT_ID initializeMultiWait()</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Semaphore.h:401</i>
     * Original signature : <code>void deleteMultiWait(MULTIWAIT_ID)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Semaphore.h:403</i><br>
     * @deprecated use the safer methods {@link #deleteMultiWait(edu.wpi.first.wpilibj.hal.HALLibrary.MULTIWAIT_ID)} and {@link #deleteMultiWait(com.sun.jna.Pointer)} instead
     * Original signature : <code>void deleteMultiWait(MULTIWAIT_ID)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Semaphore.h:403</i>
     * Original signature : <code>int8_t takeMultiWait(MULTIWAIT_ID, int32_t)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Semaphore.h:405</i><br>
     * @deprecated use the safer methods {@link #takeMultiWait(edu.wpi.first.wpilibj.hal.HALLibrary.MULTIWAIT_ID, int)} and {@link #takeMultiWait(com.sun.jna.Pointer, int)} instead
     * Original signature : <code>int8_t takeMultiWait(MULTIWAIT_ID, int32_t)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Semaphore.h:405</i>
     * Original signature : <code>int8_t giveMultiWait(MULTIWAIT_ID)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Semaphore.h:407</i><br>
     * @deprecated use the safer methods {@link #giveMultiWait(edu.wpi.first.wpilibj.hal.HALLibrary.MULTIWAIT_ID)} and {@link #giveMultiWait(com.sun.jna.Pointer)} instead
     * Original signature : <code>int8_t giveMultiWait(MULTIWAIT_ID)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Semaphore.h:407</i>
     * Original signature : <code>TASK spawnTask(char*, int, int, int, FUNCPTR, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Task.h:420</i><br>
     * @deprecated use the safer methods {@link #spawnTask(java.nio.ByteBuffer, int, int, int, edu.wpi.first.wpilibj.hal.HALLibrary.FUNCPTR, int, int, int, int, int, int, int, int, int, int)} and {@link #spawnTask(com.sun.jna.Pointer, int, int, int, edu.wpi.first.wpilibj.hal.HALLibrary.FUNCPTR, int, int, int, int, int, int, int, int, int, int)} instead
     * Original signature : <code>TASK spawnTask(char*, int, int, int, FUNCPTR, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Task.h:420</i>
     * Original signature : <code>STATUS restartTask(TASK)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Task.h:422</i><br>
     * @deprecated use the safer methods {@link #restartTask(edu.wpi.first.wpilibj.hal.HALLibrary.TASK)} and {@link #restartTask(com.sun.jna.Pointer)} instead
     * Original signature : <code>STATUS restartTask(TASK)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Task.h:422</i>
     * Original signature : <code>STATUS deleteTask(TASK)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Task.h:424</i><br>
     * @deprecated use the safer methods {@link #deleteTask(edu.wpi.first.wpilibj.hal.HALLibrary.TASK)} and {@link #deleteTask(com.sun.jna.Pointer)} instead
     * Original signature : <code>STATUS deleteTask(TASK)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Task.h:424</i>
     * Original signature : <code>STATUS isTaskReady(TASK)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Task.h:426</i><br>
     * @deprecated use the safer methods {@link #isTaskReady(edu.wpi.first.wpilibj.hal.HALLibrary.TASK)} and {@link #isTaskReady(com.sun.jna.Pointer)} instead
     * Original signature : <code>STATUS isTaskReady(TASK)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Task.h:426</i>
     * Original signature : <code>STATUS isTaskSuspended(TASK)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Task.h:428</i><br>
     * @deprecated use the safer methods {@link #isTaskSuspended(edu.wpi.first.wpilibj.hal.HALLibrary.TASK)} and {@link #isTaskSuspended(com.sun.jna.Pointer)} instead
     * Original signature : <code>STATUS isTaskSuspended(TASK)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Task.h:428</i>
     * Original signature : <code>STATUS suspendTask(TASK)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Task.h:430</i><br>
     * @deprecated use the safer methods {@link #suspendTask(edu.wpi.first.wpilibj.hal.HALLibrary.TASK)} and {@link #suspendTask(com.sun.jna.Pointer)} instead
     * Original signature : <code>STATUS suspendTask(TASK)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Task.h:430</i>
     * Original signature : <code>STATUS resumeTask(TASK)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Task.h:432</i><br>
     * @deprecated use the safer methods {@link #resumeTask(edu.wpi.first.wpilibj.hal.HALLibrary.TASK)} and {@link #resumeTask(com.sun.jna.Pointer)} instead
     * Original signature : <code>STATUS resumeTask(TASK)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Task.h:432</i>
     * Original signature : <code>STATUS verifyTaskID(TASK)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Task.h:434</i><br>
     * @deprecated use the safer methods {@link #verifyTaskID(edu.wpi.first.wpilibj.hal.HALLibrary.TASK)} and {@link #verifyTaskID(com.sun.jna.Pointer)} instead
     * Original signature : <code>STATUS verifyTaskID(TASK)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Task.h:434</i>
     * Original signature : <code>STATUS setTaskPriority(TASK, int)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Task.h:436</i><br>
     * @deprecated use the safer methods {@link #setTaskPriority(edu.wpi.first.wpilibj.hal.HALLibrary.TASK, int)} and {@link #setTaskPriority(com.sun.jna.Pointer, int)} instead
     * Original signature : <code>STATUS setTaskPriority(TASK, int)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Task.h:436</i>
     * Original signature : <code>STATUS getTaskPriority(TASK, int*)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Task.h:438</i><br>
     * @deprecated use the safer methods {@link #getTaskPriority(edu.wpi.first.wpilibj.hal.HALLibrary.TASK, java.nio.IntBuffer)} and {@link #getTaskPriority(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
     * Original signature : <code>STATUS getTaskPriority(TASK, int*)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\Task.h:438</i>
     * Original signature : <code>void* getPort(uint8_t)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\HAL.h:446</i>
     * Original signature : <code>uint16_t getFPGAVersion(int32_t*)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\HAL.h:452</i><br>
     * @deprecated use the safer methods {@link #getFPGAVersion(java.nio.IntBuffer)} and {@link #getFPGAVersion(com.sun.jna.ptr.IntByReference)} instead
     * Original signature : <code>uint16_t getFPGAVersion(int32_t*)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\HAL.h:452</i>
     * Original signature : <code>uint32_t getFPGARevision(int32_t*)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\HAL.h:454</i><br>
     * @deprecated use the safer methods {@link #getFPGARevision(java.nio.IntBuffer)} and {@link #getFPGARevision(com.sun.jna.ptr.IntByReference)} instead
     * Original signature : <code>uint32_t getFPGARevision(int32_t*)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\HAL.h:454</i>
     * Original signature : <code>uint32_t getFPGATime(int32_t*)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\HAL.h:456</i><br>
     * @deprecated use the safer methods {@link #getFPGATime(java.nio.IntBuffer)} and {@link #getFPGATime(com.sun.jna.ptr.IntByReference)} instead
     * Original signature : <code>uint32_t getFPGATime(int32_t*)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\HAL.h:456</i>
     * Original signature : <code>double testDouble(double)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\HAL.h:462</i>
     */
    @objid ("24bc6cfd-34b2-408f-8981-7b737ed425b9")
    public static native double testDouble(double param);

    /**
     * Original signature : <code>int32_t testInt32(int32_t)</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\HAL.h:464</i>
     */
    @objid ("011fdac8-84de-49e5-9a0c-4bdc608497a8")
    public static native int testInt32(int param);

    /**
     * Original signature : <code>void NumericArrayResize()</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\HAL.h:470</i>
     */
    @objid ("1d56a021-06bb-4274-8e21-653c3b0cf427")
    public static native void NumericArrayResize();

    /**
     * Original signature : <code>void RTSetCleanupProc()</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\HAL.h:472</i>
     */
    @objid ("e49eef17-e637-43cb-bbd4-a93923c6c19e")
    public static native void RTSetCleanupProc();

    /**
     * Original signature : <code>void EDVR_CreateReference()</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\HAL.h:474</i>
     */
    @objid ("033e14c2-b1ad-4f52-9b79-ffbdff5e26e5")
    public static native void EDVR_CreateReference();

    /**
     * Original signature : <code>void Occur()</code><br>
     * <i>native declaration : AthenaJava\target\native\include\HAL\HAL.h:476</i>
     */
    @objid ("548737d9-dfc3-4204-b252-5564a53a0eca")
    public static native void Occur();


/*
    public static final GlobalDouble kDefaultWatchdogExpiration = new GlobalDouble(HALLibrary.JNA_NATIVE_LIB, "kDefaultWatchdogExpiration");
    public static final GlobalInt HAL_NO_WAIT = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "HAL_NO_WAIT");
    public static final GlobalInt HAL_WAIT_FOREVER = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "HAL_WAIT_FOREVER");
    public static final GlobalInt SEMAPHORE_Q_FIFO = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "SEMAPHORE_Q_FIFO");
    */
/*
    public static final GlobalInt SEMAPHORE_DELETE_SAFE = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "SEMAPHORE_DELETE_SAFE");
    public static final GlobalInt SEMAPHORE_INVERSION_SAFE = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "SEMAPHORE_INVERSION_SAFE");
    public static final GlobalInt SEMAPHORE_NO_WAIT = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "SEMAPHORE_NO_WAIT");
    */
/*
    public static final GlobalInt SEMAPHORE_EMPTY = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "SEMAPHORE_EMPTY");
    public static final GlobalInt SEMAPHORE_FULL = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "SEMAPHORE_FULL");
    public static final GlobalInt VXWORKS_FP_TASK = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "VXWORKS_FP_TASK");
    public static final GlobalInt HAL_objLib_OBJ_ID_ERROR = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "HAL_objLib_OBJ_ID_ERROR");
    public static final GlobalInt HAL_objLib_OBJ_DELETED = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "HAL_objLib_OBJ_DELETED");
    public static final GlobalInt HAL_taskLib_ILLEGAL_OPTIONS = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "HAL_taskLib_ILLEGAL_OPTIONS");
    public static final GlobalInt HAL_memLib_NOT_ENOUGH_MEMORY = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "HAL_memLib_NOT_ENOUGH_MEMORY");
    public static final GlobalInt HAL_taskLib_ILLEGAL_PRIORITY = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "HAL_taskLib_ILLEGAL_PRIORITY");
    public static final GlobalInt dio_kNumSystems = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "dio_kNumSystems");
    public static final GlobalInt solenoid_kNumDO7_0Elements = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "solenoid_kNumDO7_0Elements");
    public static final GlobalInt interrupt_kNumSystems = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "interrupt_kNumSystems");
    public static final GlobalInt kSystemClockTicksPerMicrosecond = new GlobalInt(HALLibrary.JNA_NATIVE_LIB, "kSystemClockTicksPerMicrosecond");
    */
/*
    public static class TASK extends PointerType {
        public TASK(Pointer address) {
            super(address);
        }
        public TASK() {
            super();
        }
    };
    public static class MUTEX_ID extends PointerType {
        public MUTEX_ID(Pointer address) {
            super(address);
        }
        public MUTEX_ID() {
            super();
        }
    };
    public static class MULTIWAIT_ID extends PointerType {
        public MULTIWAIT_ID(Pointer address) {
            super(address);
        }
        public MULTIWAIT_ID() {
            super();
        }
    };
    public static class SEMAPHORE_ID extends PointerType {
        public SEMAPHORE_ID(Pointer address) {
            super(address);
        }
        public SEMAPHORE_ID() {
            super();
        }
    };
    */
static {
        System.loadLibrary("JNIWrappers");
    //    Native.register(HALLibrary.class, HALLibrary.JNA_NATIVE_LIB);
    }
    /**
     * <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:148</i><br>
     * enum values
     */
    @objid ("8245d4bd-820c-428a-8c62-79777af47266")
    public interface Mode {
        /**
         * <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:144</i>
         */
        @objid ("fd8f6eb3-2488-43b2-aa2f-8bf3716a151e")
        public static final int kTwoPulse = 0;

        /**
         * <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:145</i>
         */
        @objid ("823ef531-1b79-4322-9732-e46c7a53f9b5")
        public static final int kSemiperiod = 1;

        /**
         * <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:146</i>
         */
        @objid ("10a2ab75-3b05-4c34-b1a3-e0f34184e7e6")
        public static final int kPulseLength = 2;

        /**
         * <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:147</i>
         */
        @objid ("f61acd5c-0e2d-43dd-8eeb-076584c48644")
        public static final int kExternalDirection = 3;

    }

    /**
     * <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:235</i><br>
     * enum values
     */
    @objid ("2285125c-c6bc-4d86-ba68-e35acbd5232d")
    public interface tSPIConstants {
        /**
         * <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:233</i>
         */
        @objid ("6a41216f-0a7f-4a20-bb57-985c01031047")
        public static final int kReceiveFIFODepth = 512;

        /**
         * <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:234</i>
         */
        @objid ("84562381-abb7-4e94-8bcf-23995f5ef556")
        public static final int kTransmitFIFODepth = 512;

    }

    /**
     * <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:241</i><br>
     * enum values
     */
    @objid ("75644074-31e7-4458-86e7-b76c896949b5")
    public interface tFrameMode {
        /**
         * <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:237</i>
         */
        @objid ("edfead50-0fa4-4988-aa6a-53a6ad73034d")
        public static final int kChipSelect = 0;

        /**
         * <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:238</i>
         */
        @objid ("93a0f499-2484-456d-ac74-570c07041146")
        public static final int kPreLatchPulse = 1;

        /**
         * <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:239</i>
         */
        @objid ("676b6adf-788d-4b78-be06-b98ad5995d1d")
        public static final int kPostLatchPulse = 2;

        /**
         * <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:240</i>
         */
        @objid ("6c2e0b01-a462-457c-897a-ca6afef78a72")
        public static final int kPreAndPostLatchPulse = 3;

    }

}
